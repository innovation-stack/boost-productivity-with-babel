/* eslint no-console: 0 */
const fs = require('fs-extra');
const path = require('path');
const glob = require('glob');
const util = require('../util');

const CONSOLE_COLORS = util.getConsoleColorFormats();

function getFileNameConfig(filePath, tenantPath) {
  let fileName = filePath.replace(tenantPath, '');
  let fileNameTokens = fileName.split('.').slice(0, -1);
  let modifiedFileName;

  const actualFileName = fileNameTokens.reduce((acc, token, index) => {
    if (index === 0) {
      acc = token;
    } else {
      acc += token[0].toUpperCase().concat(token.substring(1));
    }
    return acc;
  });
  fileNameTokens = actualFileName.split('-');
  if (fileNameTokens.length > 0) {
    modifiedFileName = fileNameTokens.reduce((acc, token, index) => {
      if (index > 0) {
        acc += token[0].toUpperCase().concat(token.substring(1));
      }
      return acc;
    });
  }
  return {
    actualFileName,
    modifiedFileName
  };
}

function buildImportStatementsForTemplates(fileNamesConfig, tenantName) {
  return fileNamesConfig.map((fileNameConfig) => {
    let importToken;
    let fileReference;
    if (fileNameConfig.modifiedFileName) {
      importToken = fileNameConfig.modifiedFileName;
      fileReference = fileNameConfig.actualFileName;
    } else {
      importToken = fileNameConfig.actualFileName;
      fileReference = fileNameConfig.actualFileName;
    }
    return `import ${path.basename(importToken + 'Template')} from '../tenants/${tenantName}${fileReference}.html';`;
  }).join('\n');
}

function buildExportStatementsForTemplates(fileNamesConfig) {
  const exportStatementExpression = fileNamesConfig.map((fileNameConfig) => {
    const exportToken = fileNameConfig.modifiedFileName || fileNameConfig.actualFileName;
    return '\t' + path.basename(exportToken + 'Template');
  }).join(',\n');
  return `export {\n${exportStatementExpression}\n};`;
}

function getGeneratedCode(tenantName, tenantPath) {
  return new Promise((resolve, reject) => {
    try {
      const generatedCode = [
        '/* Autogenerated */',
        `import '../tenants/${tenantName}/styles/main.scss';`,
        `export const TENANT_NAME = '${tenantName}';`,
        `export const TENANT_PATH = '${tenantPath}';`,
      ];
      glob(`${tenantPath}/templates/**/*.html`, function (err, filePaths) {
        if (!err) {
          if (Array.isArray(filePaths) && filePaths.length > 0) {
            const fileNamesConfig = filePaths.map((filePath) => getFileNameConfig(filePath, tenantPath));
            generatedCode.push(buildImportStatementsForTemplates(fileNamesConfig, tenantName));
            generatedCode.push(buildExportStatementsForTemplates(fileNamesConfig));
          }
          resolve(generatedCode.join('\n'));
        } else {
          reject(err);
        }
      });
    } catch (ex) {
      reject(ex.message);
    }
  });
}

async function populateTenant(tenantName, tenantPath) {
  const result = {};
  try {
    const generatedCode = await getGeneratedCode(tenantName, tenantPath);
    await fs.writeFile(path.resolve(__dirname, '../../src/tenant.js'), generatedCode);
    result.tenantPopulated = true;
  } catch (ex) {
    result.tenantPopulated = false;
    console.log(CONSOLE_COLORS.RED, ex.message);
  }
  return result;
}

module.exports = populateTenant;